import java.util.Collection;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeSet;


public class UtilityMethods {
    
    public static <T> void rotate(Collection<T> collection, int rotateStep) {
        Deque<T> myDeque = new LinkedList<T>();
        
        myDeque.addAll(collection);
        collection.clear();
        
        if(rotateStep > myDeque.size()) {
            rotateStep = rotateStep % myDeque.size();
        }
        
        while(rotateStep != 0) {
            if(rotateStep > 0) {
                myDeque.addFirst(myDeque.pollLast());
                rotateStep--;
            }
            else {
                myDeque.addLast(myDeque.pollFirst());
                rotateStep++;
            }
        }
        
        collection.addAll(myDeque);
        myDeque.clear();
    }
    
    public static Integer firstUnique(Collection<Integer> myCollection) {
        
        TreeSet<Integer> mySet = new TreeSet<Integer>();
        
        for(Integer i : myCollection) {
            if(!(mySet.contains(i))) {
                mySet.add(i);
            }
            else {
                mySet.remove(i);
            }
        }
        
        return mySet.pollFirst();
    }
    
    public static <T> Set<T> duplicatingElements(Set<T>... someSets) {
        
        Set<T> mySet = null;
        int shortestSetSize = Integer.MAX_VALUE;
        
        for(Set<T> someSet : someSets) {
            if(someSet.size() < shortestSetSize) {
                shortestSetSize = someSet.size();
                mySet = someSet;
            }
        }
        
        for(Set<T> someSet : someSets) {
            if(someSet.equals(mySet)) {
                continue;
            }
            
            else {
                mySet.retainAll(someSet);
            }
        }
        
        return mySet;
    }
    
    public static String hashMapToString(Map<? extends Object, ? extends Object> map) {
        StringBuilder sb = new StringBuilder();

        sb.append("{ ");

        for (Entry<? extends Object, ? extends Object> entry : map.entrySet()) {
            sb.append(entry.getKey() + ": " + entry.getValue() + " ");
        }

        sb.append("}");

        return sb.toString();
    }
    
    public static Map<String, Integer> countWordOccurrences(String someString) {
        Map<String, Integer> mapOfWords = new LinkedHashMap<String, Integer>();
        String[] words = someString.replaceAll("[(.!?',)]", "").trim().replace("\\s", " ").split(" ");
        
        for(String word : words) {
            if(mapOfWords.containsKey(word)) {
                mapOfWords.put(word, mapOfWords.get(word) + 1);
            }
            else {
                mapOfWords.put(word, 1);
            }
        }
        
        return mapOfWords;
    }
    
}
