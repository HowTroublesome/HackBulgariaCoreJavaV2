import java.util.concurrent.atomic.AtomicInteger;


public class BasicMultithreading extends Thread {
    
    private static final int UPPBOUND = 30;
    private static int counter = 0;
    private static AtomicInteger counter2 = new AtomicInteger(0);
    private Thread T;
    private String threadName;
    
    public static Object lock1 = new Object();
    
    public static boolean flag = true;
    
    public BasicMultithreading(String name) {
        this.threadName = name;
        this.T = new Thread(this, this.threadName);
        System.out.println("Creating " + threadName);
    }
    
    @Override
    public void run() {

        System.out.println("Running " + threadName);            
        for(int i = 0; i <= UPPBOUND; i++) {
//          increment();
//          System.out.println("Thread " + threadName + ", " + counter);
            
//          atomicIncrement();
//          System.out.println("Thread " + threadName + ", " + counter2);
            
            synchronized(lock1) {
                increment();
                if(flag == true) {  
                    lock1.notifyAll();
                }
            }
            
        }
        try {
            Thread.sleep(50);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Thread " +  threadName + " Exiting.");
    }
    
    public synchronized void increment() {
        counter++;
    }
    
    public void atomicIncrement() {
        counter2.incrementAndGet();
    }
    
}
